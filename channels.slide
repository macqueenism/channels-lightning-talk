Introduction to Channels
Exploring Zipf's Law

28 March 2017

Alec MacQueen
Software Engineer, Administrate 
@macqueenism

* Concurrency and Parallelism 

* In short:
In programming, concurrency is the composition of independently executing processes, while parallelism is the simultaneous execution of (possibly related) computations. 

Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.

_Andrew_Gerrand_

* 
.image c_v_p.png 
.link https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1 source

* How does Go manage concurrency? 

* Goroutines

- These are not threads. 

* Goroutines

- These are not threads. 
- They run in the same memory space.  

* Goroutines

- These are not threads. 
- They run in the same memory space.  
- They are much cheaper (you can easily have thousands running at the same time).

* Goroutines

- These are not threads. 
- They run in the same memory space.  
- They are much cheaper (you can easily have thousands running at the same time).
- They _could_ be parallel.

* Goroutines

- These are not threads. 
- They run in the same memory space.  
- They are much cheaper (you can easily have thousands running at the same time).
- They _could_ be parallel.
- They are definitely concurrent. 

* Goroutines

- These are not threads. 
- They run in the same memory space.  
- They are much cheaper (you can easily have thousands running at the same time).
- They _could_ be parallel.
- They are definitely concurrent. 
- You don't have to worry about thread management, Golang handles it all for you. 

* Goroutines

- These are not threads. 
- They run in the same memory space.  
- They are much cheaper (you can easily have thousands running at the same time).
- They _could_ be parallel.
- They are definitely concurrent. 
- You don't have to worry about thread management, Golang handles it all for you. 
- The syntax is: 
   go yourGreatFunction() 

* Channels

* "Do not communicate by sharing memory; instead, share memory by communicating." 
 
* Communicating by sharing memory

- You might use locks to syncronise your processes.
- The threads have to check the lock to make sure they can proceed 
- You can use locks, mutexes, wait groups and atomic values in Go   

* Sharing memory by communicating

- Goroutines can talk to each other
- They can pass the data they are processing from one goroutine to the next
- How do we do this? Channels! 

* Syntax

- Create a channel with:
    channel := make(chan <type>)
- Send data to a channel 
    channel <- data
- Recieve a value off a channel with 
    result <- channel

* Moar Syntax

- Range over all the values in a channel 

    for result := range channel {
        fmt.Println(result)
    }
- If you know the number of values you're expecting
    go func(){
        for i := 0; i < len(values); i++ {
            fmt.Println(<-channel)
        }
    }()

* Example: No channels

.code -edit no_channels.go /START OMIT/,/END OMIT/

* Same Example: Channels

.code -edit channels.go /START OMIT/,/END OMIT/

* Fun facts

- Unbuffered channels block
- So remember to take values off them to proceed 
- Also remember to close them
- Go will remember and will shout at you: 
    fatal error: all goroutines are asleep - deadlock!

* What's Zipf?

* Zipf's Law

A pattern of distribution in certain data sets, notably words in a linguistic corpus, by which the frequency of an item is inversely proportional to its ranking by frequency.

* Or

Given a whole bunch of words, a word should appear at a rate of 1/(rank in frequency).

* Channels resources

- Rob Pike's talk on concurrency
- Some blog 
- Todd Mcleod's Golang Tutorials on youtube/udemy 
